"""
Read and wirte matrix and h5 generaged by cellranger
Benjamin Fang
"""

import numpy as np
import scipy.sparse as sparse
import h5py
import os
import gzip
import sys


def read_10x_as_sparse_mtx(barcodes_f, features_f, matrix_f, dtype="int32"):
    """
    Read 10x cellranger generated matrix files.

    Parameters
    -----------
    matrix_dire: string, directory where the matrix file and its companies located.
        The matrix file is: matirx_dire/matrix.mtx.gz
        Bracodes file is: matrix_dire/barcodes.tsv.gz
        Features file is: matrix_dire/features.tsv.gz
    
    dtype: string, data type of numpy 2d array.
        Default is int32.

    Returs
    -----------
        barcodes: a list object of barcodes.
        features: a list object of features. The element of list is a list too.
        mtx: a scipy coo_matrix.
    """

    if ((not os.path.exists(barcodes_f)) or
        (not os.path.exists(features_f)) or
        (not os.path.exists(matrix_f))):

        print("error, file not exists")
        exit()

    bar_fin = gzip.open(barcodes_f, "r")
    barcodes = []
    for line in bar_fin:
        line = line.decode().rstrip()
        barcodes.append(line)
    bar_fin.close()

    fea_fin = gzip.open(features_f, "r")
    features = []
    for line in fea_fin:
        line = line.decode().rstrip().split("\t")
        features.append(line)
    fea_fin.close()

    nrow = len(features)
    ncol = len(barcodes)
    mtx_fin = gzip.open(matrix_f, "r")
    mtx_fin.readline()
    mtx_fin.readline()
    mtx_info = mtx_fin.readline().decode().rstrip().split()
    nrow_mtx, ncol_mtx, nval_mtx = \
        int(mtx_info[0]), int(mtx_info[1]), int(mtx_info[2])
    assert nrow == nrow_mtx
    assert ncol == ncol_mtx
    mtx = sparse.lil_matrix((nrow, ncol), dtype=dtype)
    val_count = 0
    for line in mtx_fin:
        line = line.decode().rstrip().split()
        irow, icol, val = int(line[0]), int(line[1]), int(line[2])
        mtx[irow - 1, icol - 1] = val
        val_count += 1
    assert nval_mtx == val_count
    mtx_fin.close()
    mtx = mtx.tocoo()

    return barcodes, features, mtx


def write_sparse_mtx_10x(barcodes, features, mtx, dire):
    """
    Write mtx data to files

    Parameters
    ------------
    barcodes: list, a barcodes list.
    features: [list], a list of list which have length of 3.
    mtx: scipy coo_matrix data
    dire: directory for output. 
    
    Retures
    -----------
    values: int, value number have been writen.

    """
    
    bar_f = os.path.join(dire, "matrix.mtx.gz")
    fea_f = os.path.join(dire, "barcodes.tsv.gz")
    mtx_f = os.path.join(dire, "features.tsv.gz")

    ncol = len(bar_f)
    bar_fout = gzip.open(bar_f, "w")
    for line in barcodes:
        bar_fout.write(line.encode() + b"\n")
    bar_fout.close()

    nrow = len(features)
    fea_fout = gzip.open(fea_f, "w")
    for line in features:
        line = "\t".join(line)
        fea_fout.write(line.encode() + b"\n")
    fea_fout.close()

    nrow_mtx, ncol_mtx = mtx.shape
    assert nrow == nrow_mtx
    assert ncol == ncol_mtx
    nval = mtx.size
    line1 = "%%MatrixMarket matrix"
    line2 = "%generated by io_10x"
    line3 = " ".join([str(nrow), str(ncol), str(nval)])
    mtx_fout = gzip.open(mtx_f, "w")
    mtx_fout.write(line1.encode() + b"\n")
    mtx_fout.write(line2.encode() + b"\n")
    mtx_fout.write(line3.encode() + b"\n")
    for irow, icol, val in zip(mtx.row, mtx.col, mtx.data):
        mtx_fout.write(" ".join([str(irow + 1),
            str(icol + 1), str(val)]).encode() + b"\n")
    mtx_fout.close()

    return nval



def read_10x_as_dense_mtx(barcodes_f, features_f, matrix_f, dtype="int32"):
    """
    Read 10x cellranger generated matrix files.

    Parameters
    -----------
    matrix_dire: string, directory where the matrix file and its companies located.
        The matrix file is: matirx_dire/matrix.mtx.gz
        Bracodes file is: matrix_dire/barcodes.tsv.gz
        Features file is: matrix_dire/features.tsv.gz
    
    dtype: string, data type of numpy 2d array.
        Default is int32.

    Returs
    -----------
        mtx: a dense matrix, [irow, icol, value].
        barcodes: a list object of barcodes.
        features: a list object of features. The element of list is a list too.
    """
    
    if ((not os.path.exists(matrix_f)) or
        (not os.path.exists(barcodes_f)) or
        (not os.path.exists(features_f))):

        print("error, file not exists")
        exit()

    bar_fin = gzip.open(barcodes_f, "r")
    barcodes = []
    for line in bar_fin:
        line = line.decode().rstrip()
        barcodes.append(line)
    bar_fin.close()

    fea_fin = gzip.open(features_f, "r")
    features = []
    for line in fea_fin:
        line = line.decode().rstrip().split("\t")
        features.append(line)
    fea_fin.close()

    nrow = len(features)
    ncol = len(barcodes)
    mtx_fin = gzip.open(matrix_f, "r")
    mtx_fin.readline()
    mtx_fin.readline()
    mtx_info = mtx_fin.readline().decode().rstrip().split()
    nrow_mtx, ncol_mtx, nval_mtx = \
        int(mtx_info[0]), int(mtx_info[1]), int(mtx_info[2])
    assert nrow == nrow_mtx
    assert ncol == ncol_mtx
    mtx = np.zeros((nrow, ncol), dtype=dtype)
    val_count = 0
    for line in mtx_fin:
        line = line.decode().rstrip().split()
        if dtype == "int32":
            irow, icol, val = int(line[0]), int(line[1]), int(line[2])
        elif dtype == "float32":
            irow, icol, val = int(line[0]), int(line[1]), float(line[2])
        else:
            irow, icol, val = int(line[0]), int(line[1]), float(line[2])
        mtx[irow - 1, icol - 1] = val
        val_count += 1
    assert nval_mtx == val_count
    mtx_fin.close()

    return barcodes, features, mtx


def write_dense_mtx_10x(barcodes, features, mtx, dire):
    """
    Write mtx data to files

    Parameters
    ------------
    barcodes: list, a barcodes list.
    features: [list], a list of list which have length of 3.
    mtx: matrix data
    dire: directory for output. 
    
    Retures
    -----------
    values: int, value number have been writen.

    """
    
    bar_f = os.path.join(dire, "barcodes.tsv.gz")
    fea_f = os.path.join(dire, "features.tsv.gz")
    mtx_f = os.path.join(dire, "matrix.mtx.gz")

    ncol = len(barcodes)
    bar_fout = gzip.open(bar_f, "w")
    for line in barcodes:
        bar_fout.write(line.encode() + b"\n")
    bar_fout.close()

    nrow = len(features)
    fea_fout = gzip.open(fea_f, "w")
    for line in features:
        line = "\t".join(line)
        fea_fout.write(line.encode() + b"\n")
    fea_fout.close()

    nval = 0
    data = []
    for i in range(ncol):
        for j in range(nrow):
            val = mtx[j, i]
            if val != 0:
                data.append([j + 1, i + 1, mtx[j, i]])
                nval += 1

    line1 = "%%MatrixMarket matrix"
    line2 = "%"
    line3 = " ".join([str(nrow), str(ncol), str(nval)])
    mtx_fout = gzip.open(mtx_f, "w")
    mtx_fout.write(line1.encode() + b"\n")
    mtx_fout.write(line2.encode() + b"\n")
    mtx_fout.write(line3.encode() + b"\n")
    for entry in data:
        mtx_fout.write(" ".join([str(entry[0]),
            str(entry[1]), str(entry[2])]).encode() + b"\n")
    mtx_fout.close()

    return nval



def read_10x_h5():
    pass


def write_10x_h5():
    pass


if __name__ == "__main__":
    dire = sys.argv[1]
    barcodes, features, mtx = read_10x_matrix_sparse(dire, "int32")
    print(barcodes[:10])
    print(features[:10])
    print(mtx[:10])
